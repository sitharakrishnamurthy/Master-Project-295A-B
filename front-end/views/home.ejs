<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway">

    <!-- jquery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous">
    </script>
    <!-- three.js-->
    <script src="../javascript/three.js"></script>
    <!-- clmtrack -->
    <script src="../javascript/utils.js"></script>
    <script src="../javascript/clmtrackr.js"></script>

    <!-- bootstrap -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"
        id="bootstrap-css">
    <!-- project css -->
    <link rel="stylesheet" href="../stylesheet/try_on.css">
    <link rel="stylesheet" href="../stylesheet/carosule.css">
    <link rel="stylesheet" href="../stylesheet/columns.css">
    <link rel="stylesheet" href="../stylesheet/background.css">
    <style>
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        body {
            font-family: "Raleway"
        }
    </style>
</head>

<body>
    <div class="row">
        <div class="container-fluid">
            <div class="bgimg w3-display-container w3-animate-opacity w3-text-white" style="height: 70.688px;">
                <div class="w3-display-middle w3-padding-xlarge w3-xxlarge">
                    Virtual Try On
                </div>
            </div>
            <div id="loadingPredict" style="display: none"></div>
            <div class="tab" id="content">

                <!-- Nav tabs -->
                <ul id="tabs" class="nav nav-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link tab-a" id="GlassesTab" data-target="#Glasses" aria-controls="Glasses"
                            data-toggle="tab" href="/glasses-try-on">Try on Glasses</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="ClothTab" data-target="#Clothes" aria-controls="Clothes"
                            data-toggle="tab" href="/clothes-try-on">Try on Clothes</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="HairColorTab" data-target="#Hair" aria-controls="Hair" data-toggle="tab"
                            href="/change-hair-color">Change Hair Color</a>
                    </li>
                </ul>

                <!-- Tab panes -->
                <div id="my-tab-content" class="tab-content">
                    <div class="container tab-pane" role="tabpanel" id="Glasses">
                    </div>
                    <div class="container tab-pane fade" id="Clothes">
                    </div>
                    <div class="container tab-pane fade" id="Hair">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
            var url = $(this).attr("href"); // the remote url for content
            var target = $(this).data("target"); // the target pane
            var tab = $(this); // this tab
            // ajax load from data-url
            $(target).load(url, function (result) {
                tab.tab('show');
            });
        });
        // initially activate the first tab..
        $('#GlassesTab').tab('show');
    </script>
    <script>
        var TryOnFace = function (params) {
            var ref = this;

            this.selector = 'tryon';
            //sizes
            this.object = params.object;
            this.width = params.width;
            this.height = params.height;

            if (params.statusHandler) {
                this.statusHandler = params.statusHandler;
            } else {
                this.statusHandler = function () {};
            }
            this.changeStatus = function (status) {
                this.status = status;
                this.statusHandler(this.status);
            };
            this.changeStatus('STATUS_READY');

            if (params.debug) {
                this.debug = true;
                this.debugMsg = this.status;
            } else {
                this.debug = false;
            }

            /* CAMERA */
            this.video = document.getElementById('g_camera');
            document.getElementById(this.selector).style.width = this.width + "px";
            this.video.setAttribute('width', this.width);
            this.video.setAttribute('height', this.height);

            /* face tracker */
            this.tracker = new clm.tracker({
                useWebGL: true
            });
            this.tracker.init();

            /**
             * Start try-on
             * @returns {undefined}
             */
            this.start = function () {
                var video = ref.video;

                navigator.getUserMedia = (
                    navigator.getUserMedia ||
                    navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia ||
                    navigator.msGetUserMedia
                );

                if (navigator.getUserMedia) {
                    navigator.getUserMedia({
                            video: true
                        },
                        function (localMediaStream) {
                            video.srcObject = localMediaStream;
                            video.play();
                            ref.changeStatus('STATUS_CAMERA_ERROR');
                        },

                        function (err) {
                            ref.changeStatus('STATUS_CAMERA_ERROR');
                        }
                    );
                } else {
                    ref.changeStatus('STATUS_CAMERA_ERROR');
                }

                //start tracking
                ref.tracker.start(video);
                //continue in loop
                ref.loop();
            };

            this.debug = function (msg) {
                if (this.debug) {
                    this.debugMsg += msg + "<br>";
                }
            };

            this.printDebug = function () {
                if (this.debug) {
                    document.getElementById('debug').innerHTML = this.debugMsg;
                    this.debugMsg = '';
                }
            };

            this.loop = function () {
                requestAnimFrame(ref.loop);

                var positions = ref.tracker.getCurrentPosition();

                if (positions) {
                    //current distance
                    var distance = Math.abs(90 / ((positions[0][0].toFixed(0) - positions[
                            14][0].toFixed(0)) /
                        2));
                    //horizontal angle // горизонтальный угол (поворот лица)
                    var hAngle = 90 - (positions[14][0].toFixed(0) - positions[33][0]
                        .toFixed(0)) * distance;
                    //center point
                    var center = {
                        x: positions[33][0],
                        y: (positions[33][1] + positions[41][1]) / 2
                    };
                    center = ref.correct(center.x, center.y);

                    var zAngle = (positions[33][0] - positions[7][0]) * -1;

                    //allowable distance
                    if (distance < 1.5 && distance > 0.5) {
                        ref.changeStatus('STATUS_FOUND');

                        //set positions
                        ref.position.x = center.x - (hAngle / 2);
                        ref.position.y = center.y;
                        ref.rotation.y = hAngle / 100 / 2;
                        ref.rotation.z = zAngle / 100 / 1.5;
                        //size
                        ref.size.x = ((positions[14][0] - positions[0][0]) / 2) + 0.05 * (
                            positions[14][0] -
                            positions[0][0]);
                        ref.size.y = (ref.size.x / ref.images['front'].width) * ref.images[
                            'front'].height;
                        ref.size.z = ref.size.x * 3;
                        ref.position.z = (ref.size.z / 2) * -1;
                        //render
                    } else {
                        ref.changeStatus('STATUS_SEARCH');
                        ref.size.x = 0;
                        ref.size.y = 0;
                    }

                    ref.render();
                    ref.debug(ref.status);
                }

                //print debug
                ref.printDebug();
            };

            /* 3D */
            var canvas = document.getElementById("overlay");
            var renderer = new THREE.WebGLRenderer({
                canvas: canvas,
                antialias: true,
                alpha: true
            });
            renderer.setClearColor(0xffffff, 0);
            renderer.setSize(this.width, this.height);

            //add scene
            var scene = new THREE.Scene;

            //define sides
            var outside = {
                0: 'left',
                1: 'right',
                4: 'front'
            };

            this.images = [];
            var materials = [];
            for (i = 0; i < 6; i++) {
                if (this.object.outside[outside[i]] !== undefined) {
                    var image = new Image();
                    image.src = this.object.outside[outside[i]];
                    this.images[outside[i]] = image;
                    if (i === 0 || i === 1) {
                        materials.push(new THREE.MeshPhongMaterial({
                            map: THREE.ImageUtils.loadTexture(this.object.outside[
                                outside[i]]),
                            transparent: true,
                            opacity: 0.43
                        }));
                    } else {
                        materials.push(new THREE.MeshLambertMaterial({
                            map: THREE.ImageUtils.loadTexture(this.object.outside[
                                outside[i]]),
                            transparent: true,
                        }));
                    }
                } else {
                    materials.push(new THREE.MeshLambertMaterial({
                        color: 0xffffff,
                        transparent: true,
                        opacity: 0
                    }));
                }
            }

            //init position and size
            this.position = {
                x: 0,
                y: 0,
                z: 0
            };
            this.rotation = {
                x: 0,
                y: 0
            };
            this.size = {
                x: 1,
                y: 1,
                z: 1
            };

            //set up object
            var geometry = new THREE.CubeGeometry(1, 1, 1);
            var materials = new THREE.MeshFaceMaterial(materials);
            var cube = new THREE.Mesh(geometry, materials);
            cube.doubleSided = true;
            scene.add(cube);

            //set up camera
            var camera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 5000);
            camera.lookAt(cube.position);
            camera.position.z = this.width / 2;
            scene.add(camera);

            //set up lights
            var lightFront = new THREE.PointLight(0xffffff);
            lightFront.position.set(0, 0, 1000);
            lightFront.intensity = 0.6;
            scene.add(lightFront);

            var lightLeft = new THREE.PointLight(0xffffff);
            lightLeft.position.set(1000, 0, 0);
            lightLeft.intensity = 0.7;
            scene.add(lightLeft);

            var lightRight = new THREE.PointLight(0xffffff);
            lightRight.position.set(-1000, 0, 0);
            lightRight.intensity = 0.7;
            scene.add(lightRight);

            /**
             * Render object
             */
            this.render = function () {
                //update position
                cube.position.x = this.position.x;
                cube.position.y = this.position.y;
                cube.position.z = this.position.z;

                cube.rotation.y = this.rotation.y;
                cube.rotation.z = this.rotation.z;

                //upate size
                cube.scale.x = this.size.x;
                cube.scale.y = this.size.y;
                cube.scale.z = this.size.z;

                // console.log("CUBE----->", cube)
                renderer.render(scene, camera);
            };

            /**
             * Transform position for 3D scene
             */
            this.correct = function (x, y) {
                return {
                    x: ((this.width / 2 - x) * -1) / 2,
                    y: (this.height / 2 - y) / 2
                };
            }

            //print debug
            this.printDebug();
        };

        let pick = function pick(i) {
            var object = {
                outside: {
                    left: '../images/glasses/pair_' + i + '_side_processed.png',
                    right: '../images/glasses/pair_' + i + '_side_right_processed.png',
                    front: '../images/glasses/pair_' + i + '_front_processed.png'
                }
            };

            tryOn = new TryOnFace({
                width: 640,
                height: 480,
                debug: true,
                object: object,
                statusHandler: function (status) {
                    switch (status) {
                        case "STATUS_READY": {
                            /* Ready! Show start button or something... */
                            $('#start').show();
                        };
                        break;
                    case "STATUS_CAMERA_ERROR": {
                        /* Handle camera error */
                    };
                    break;
                    case "STATUS_SEARCH": {
                        /* Show some message while searching a face */
                    };
                    break;
                    case "STATUS_FOUND": {
                        /* OK! */
                    }
                    }
                }
            });
            tryOn.start();
            return
        };

        var tryOn = null;

        $(window).load(function () {

            var object = {
                outside: {
                    left: '../images/glasses/pair_1_side_processed.png',
                    right: '../images/glasses/pair_1_side_right_processed.png',
                    front: '../images/glasses/pair_1_front_processed.png'
                }
            };

            tryOn = new TryOnFace({
                width: 640,
                height: 480,
                debug: true,
                object: object,
                statusHandler: function (status) {
                    switch (status) {
                        case "STATUS_READY": {
                            /* Ready! Show start button or something... */
                            $('#start').show();
                        };
                        break;
                    case "STATUS_CAMERA_ERROR": {
                        /* Handle camera error */
                    };
                    break;
                    case "STATUS_SEARCH": {
                        /* Show some message while searching a face */
                    };
                    break;
                    case "STATUS_FOUND": {
                        /* OK! */
                    }
                    }
                }
            });
            tryOn.start();
        });

        $("#ClothTab").click(function () {
            disableCamera();
            video = document.getElementById('c_camera');
        });

        $("#HairColorTab").click(function () {
            disableCamera();
            // var video = document.getElementById("video");
            
        });

        function disableCamera() {
            video = document.getElementById('g_camera');
            // now get the steam 
            stream = video.srcObject;
            // now get all tracks
            tracks = stream.getTracks();
            // now close each track by having forEach loop
            tracks.forEach(function (track) {
                // stopping every track
                track.stop();
            });
            // assign null to srcObject of video
            video.srcObject = null;
        }

        $("#GlassesTab").click(function () {
            location.reload();
        });
    </script>

</body>

</html>