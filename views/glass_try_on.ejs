<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway">

    <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>

    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"
          id="bootstrap-css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jqu ery.min.js"></script>
    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.js"></script>

    <link rel="stylesheet" href="../stylesheet/try_on.css">
    <link rel="stylesheet" href="../stylesheet/carosule.css">
    <link rel="stylesheet" href="../stylesheet/columns.css">
    <link rel="stylesheet" href="../stylesheet/background.css">

</head>

<body>
<!-- jquery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<!-- three.js r54 -->
<script src="../javascript/three.js"></script>
<!-- clmtrack -->
<script src="../javascript/utils.js"></script>
<script src="../javascript/clmtrackr.js"></script>
<style>
    <!-- /* Style the tab */
    -->
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: rgb(238,
        250,
        253);
    }
</style>


<div class="row">
    <div class="container-fluid">
        <div class="bgimg w3-display-container w3-animate-opacity w3-text-white">
            <div class="w3-display-middle w3-padding-xlarge w3-xxlarge">
                Virtual Try On
            </div>
        </div>
        <div class="tab" id="content">
            <ul id="tabs" class="nav nav-tabs" data-tabs="tabs">
                <li class="nav-item">
                    <a class="nav-link" href="#Glasses" data-toggle="tab">Try on Glasses</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#Clothes" data-toggle="tab">Try on Clothes</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" class="nav-link" href="#Hair" data-toggle="tab">Change Hair Color</a>
                </li>
            </ul>


            <!--                        <ul id="tabs" class="nav nav-tabs" data-tabs="tabs">-->
            <!--                            <li><a class="nav-link" href="#Glasses" data-toggle="tab">-->
            <!--                                    <h4>Try on Glasses</h4>-->
            <!--                                </a></li>-->
            <!--                            <li><a class="nav-link" href="#Clothes" data-toggle="tab">-->
            <!--                                    <h4>Try on Clothes</h4>-->
            <!--                                </a></li>-->
            <!--                            <li><a class="nav-link" href="#Hair" data-toggle="tab">-->
            <!--                                    <h4>Change Hair Color</h4>-->
            <!--                                </a></li>-->
            <!--                        </ul>-->
            <div id="my-tab-content" class="tab-content">
                <div class="tab-pane active" id="Glasses">
                    <h3><u>Virtual Glasses Try On</u></h3>
                    <h5>Please click on a pair of glasses to try them on.</h5>
                    <div class="container-fluid">
                        <div id="carouselExample" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner row w-100 mx-auto" role="listbox">
                                <div class="carousel-item col-md-3  active">
                                    <div class="panel panel-default">
                                        <div type="button" id="Glasses1" onclick="pick(1);" class="panel-thumbnail">
                                            <a href="#" title="image 1" class="thumb">
                                                <img class="img-fluid mx-auto d-block"
                                                     src="../images/glasses/Glasses1.png"
                                                     alt="slide 1" style="width:170px;height:90px;">
                                                <figcaption style="text-align: center">Glasses 1</figcaption>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="carousel-item col-md-3">
                                    <div class="panel panel-default">
                                        <div type="button" id="Glasses2" onclick="pick(2);" class="panel-thumbnail">
                                            <a href="#" title="image 2" class="thumb">
                                                <img class="img-fluid mx-auto d-block"
                                                     src="../images/glasses/Glasses2.png"
                                                     alt="slide 2" style="width:170px;height:90px;">
                                                <figcaption style="text-align: center">Glasses 2</figcaption>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="carousel-item col-md-3">
                                    <div class="panel panel-default">
                                        <div type="button" id="Glasses3" onclick="pick(3);" class="panel-thumbnail">
                                            <a href="#" title="image 3" class="thumb">
                                                <img class="img-fluid mx-auto d-block"
                                                     src="../images/glasses/Glasses3.png"
                                                     alt="slide 3" style="width:170px;height:90px;">
                                                <figcaption style="text-align: center">Glasses 3</figcaption>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="carousel-item col-md-3">
                                    <div class="panel panel-default">
                                        <div type="button" id="Glasses4" onclick="pick(4);" class="panel-thumbnail">
                                            <a href="#" title="image 4" class="thumb">
                                                <img class="img-fluid mx-auto d-block"
                                                     src="../images/glasses/Glasses4.png"
                                                     alt="slide 4" style="width:170px;height:90px;">
                                                <figcaption style="text-align: center">Glasses 4</figcaption>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="carousel-item col-md-3">
                                    <div class="panel panel-default">
                                        <div type="button" id="Glasses5" onclick="pick(5);" class="panel-thumbnail">
                                            <a href="#" title="image 5" class="thumb">
                                                <img class="img-fluid mx-auto d-block"
                                                     src="../images/glasses/Glasses5.png"
                                                     alt="slide 5" style="width:170px;height:90px;">
                                                <figcaption style="text-align: center">Glasses 5</figcaption>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <a class="carousel-control-prev text-faded" href="#carouselExample" role="button"
                               data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next text-faded" href="#carouselExample" role="button"
                               data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                    <div id="tryon">
                        <video id="camera" loop></video>
                        <canvas id="overlay"></canvas>
                    </div>
                    <div id="debug"></div>
                    <script>
                        var TryOnFace = function (params) {
                            var ref = this;

                            this.selector = 'tryon';
                            //sizes
                            this.object = params.object;
                            this.width = params.width;
                            this.height = params.height;

                            if (params.statusHandler) {
                                this.statusHandler = params.statusHandler;
                            } else {
                                this.statusHandler = function () {
                                };
                            }
                            this.changeStatus = function (status) {
                                this.status = status;
                                this.statusHandler(this.status);
                            };
                            this.changeStatus('STATUS_READY');

                            if (params.debug) {
                                this.debug = true;
                                this.debugMsg = this.status;
                            } else {
                                this.debug = false;
                            }

                            /* CAMERA */
                            this.video = document.getElementById('camera');
                            document.getElementById(this.selector).style.width = this.width + "px";
                            this.video.setAttribute('width', this.width);
                            this.video.setAttribute('height', this.height);

                            /* face tracker */
                            this.tracker = new clm.tracker({
                                useWebGL: true
                            });
                            this.tracker.init();

                            /**
                             * Start try-on
                             * @returns {undefined}
                             */
                            this.start = function () {
                                var video = ref.video;

                                navigator.getUserMedia = (
                                    navigator.getUserMedia ||
                                    navigator.webkitGetUserMedia ||
                                    navigator.mozGetUserMedia ||
                                    navigator.msGetUserMedia
                                );

                                if (navigator.getUserMedia) {
                                    navigator.getUserMedia({
                                            video: true
                                        },
                                        function (localMediaStream) {
                                            video.srcObject = localMediaStream;
                                            video.play();
                                            ref.changeStatus('STATUS_CAMERA_ERROR');
                                        },

                                        function (err) {
                                            ref.changeStatus('STATUS_CAMERA_ERROR');
                                        }
                                    );
                                } else {
                                    ref.changeStatus('STATUS_CAMERA_ERROR');
                                }

                                //start tracking
                                ref.tracker.start(video);
                                //continue in loop
                                ref.loop();
                            };

                            this.debug = function (msg) {
                                if (this.debug) {
                                    this.debugMsg += msg + "<br>";
                                }
                            };

                            this.printDebug = function () {
                                if (this.debug) {
                                    document.getElementById('debug').innerHTML = this.debugMsg;
                                    this.debugMsg = '';
                                }
                            };

                            this.loop = function () {
                                requestAnimFrame(ref.loop);

                                var positions = ref.tracker.getCurrentPosition();

                                if (positions) {
                                    //current distance
                                    var distance = Math.abs(90 / ((positions[0][0].toFixed(0) - positions[
                                            14][0].toFixed(0)) /
                                        2));
                                    //horizontal angle // горизонтальный угол (поворот лица)
                                    var hAngle = 90 - (positions[14][0].toFixed(0) - positions[33][0]
                                        .toFixed(0)) * distance;
                                    //center point
                                    var center = {
                                        x: positions[33][0],
                                        y: (positions[33][1] + positions[41][1]) / 2
                                    };
                                    center = ref.correct(center.x, center.y);

                                    var zAngle = (positions[33][0] - positions[7][0]) * -1;

                                    //allowable distance
                                    if (distance < 1.5 && distance > 0.5) {
                                        ref.changeStatus('STATUS_FOUND');

                                        //set positions
                                        ref.position.x = center.x - (hAngle / 2);
                                        ref.position.y = center.y;
                                        ref.rotation.y = hAngle / 100 / 2;
                                        ref.rotation.z = zAngle / 100 / 1.5;
                                        //size
                                        ref.size.x = ((positions[14][0] - positions[0][0]) / 2) + 0.05 * (
                                            positions[14][0] -
                                            positions[0][0]);
                                        ref.size.y = (ref.size.x / ref.images['front'].width) * ref.images[
                                            'front'].height;
                                        ref.size.z = ref.size.x * 3;
                                        ref.position.z = (ref.size.z / 2) * -1;
                                        //render
                                    } else {
                                        ref.changeStatus('STATUS_SEARCH');
                                        ref.size.x = 0;
                                        ref.size.y = 0;
                                    }

                                    ref.render();
                                    ref.debug(ref.status);
                                }

                                //print debug
                                ref.printDebug();
                            };

                            /* 3D */
                            var canvas = document.getElementById("overlay");
                            var renderer = new THREE.WebGLRenderer({
                                canvas: canvas,
                                antialias: true,
                                alpha: true
                            });
                            renderer.setClearColor(0xffffff, 0);
                            renderer.setSize(this.width, this.height);

                            //add scene
                            var scene = new THREE.Scene;

                            //define sides
                            var outside = {
                                0: 'left',
                                1: 'right',
                                4: 'front'
                            };

                            this.images = [];
                            var materials = [];
                            for (i = 0; i < 6; i++) {
                                if (this.object.outside[outside[i]] !== undefined) {
                                    var image = new Image();
                                    image.src = this.object.outside[outside[i]];
                                    this.images[outside[i]] = image;
                                    if (i === 0 || i === 1) {
                                        materials.push(new THREE.MeshPhongMaterial({
                                            map: THREE.ImageUtils.loadTexture(this.object.outside[
                                                outside[i]]),
                                            transparent: true,
                                            opacity: 0.43
                                        }));
                                    } else {
                                        materials.push(new THREE.MeshLambertMaterial({
                                            map: THREE.ImageUtils.loadTexture(this.object.outside[
                                                outside[i]]),
                                            transparent: true,
                                        }));
                                    }
                                } else {
                                    materials.push(new THREE.MeshLambertMaterial({
                                        color: 0xffffff,
                                        transparent: true,
                                        opacity: 0
                                    }));
                                }
                            }

                            //init position and size
                            this.position = {
                                x: 0,
                                y: 0,
                                z: 0
                            };
                            this.rotation = {
                                x: 0,
                                y: 0
                            };
                            this.size = {
                                x: 1,
                                y: 1,
                                z: 1
                            };

                            //set up object
                            var geometry = new THREE.CubeGeometry(1, 1, 1);
                            var materials = new THREE.MeshFaceMaterial(materials);
                            var cube = new THREE.Mesh(geometry, materials);
                            cube.doubleSided = true;
                            scene.add(cube);

                            //set up camera
                            var camera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 5000);
                            camera.lookAt(cube.position);
                            camera.position.z = this.width / 2;
                            scene.add(camera);

                            //set up lights
                            var lightFront = new THREE.PointLight(0xffffff);
                            lightFront.position.set(0, 0, 1000);
                            lightFront.intensity = 0.6;
                            scene.add(lightFront);

                            var lightLeft = new THREE.PointLight(0xffffff);
                            lightLeft.position.set(1000, 0, 0);
                            lightLeft.intensity = 0.7;
                            scene.add(lightLeft);

                            var lightRight = new THREE.PointLight(0xffffff);
                            lightRight.position.set(-1000, 0, 0);
                            lightRight.intensity = 0.7;
                            scene.add(lightRight);

                            /**
                             * Render object
                             */
                            this.render = function () {
                                //update position
                                cube.position.x = this.position.x;
                                cube.position.y = this.position.y;
                                cube.position.z = this.position.z;

                                cube.rotation.y = this.rotation.y;
                                cube.rotation.z = this.rotation.z;

                                //upate size
                                cube.scale.x = this.size.x;
                                cube.scale.y = this.size.y;
                                cube.scale.z = this.size.z;

                                // console.log("CUBE----->", cube)
                                renderer.render(scene, camera);
                            };

                            /**
                             * Transform position for 3D scene
                             */
                            this.correct = function (x, y) {
                                return {
                                    x: ((this.width / 2 - x) * -1) / 2,
                                    y: (this.height / 2 - y) / 2
                                };
                            }

                            //print debug
                            this.printDebug();
                        };

                        let pick = function pick(i) {
                            var object = {
                                outside: {
                                    left: '../images/glasses/pair_' + i + '_side_processed.png',
                                    right: '../images/glasses/pair_' + i + '_side_right_processed.png',
                                    front: '../images/glasses/pair_' + i + '_front_processed.png'
                                }
                            };

                            tryOn = new TryOnFace({
                                width: 640,
                                height: 480,
                                debug: true,
                                object: object,
                                statusHandler: function (status) {
                                    switch (status) {
                                        case "STATUS_READY": {
                                            /* Ready! Show start button or something... */
                                            $('#start').show();
                                        }
                                            ;
                                            break;
                                        case "STATUS_CAMERA_ERROR": {
                                            /* Handle camera error */
                                        }
                                            ;
                                            break;
                                        case "STATUS_SEARCH": {
                                            /* Show some message while searching a face */
                                        }
                                            ;
                                            break;
                                        case "STATUS_FOUND": {
                                            /* OK! */
                                        }
                                    }
                                }
                            });
                            tryOn.start();
                            return
                        };

                        var tryOn = null;

                        $(window).load(function () {

                            var object = {
                                outside: {
                                    left: '../images/glasses/pair_1_side_processed.png',
                                    right: '../images/glasses/pair_1_side_right_processed.png',
                                    front: '../images/glasses/pair_1_front_processed.png'
                                }
                            };

                            tryOn = new TryOnFace({
                                width: 640,
                                height: 480,
                                debug: true,
                                object: object,
                                statusHandler: function (status) {
                                    switch (status) {
                                        case "STATUS_READY": {
                                            /* Ready! Show start button or something... */
                                            $('#start').show();
                                        }
                                            ;
                                            break;
                                        case "STATUS_CAMERA_ERROR": {
                                            /* Handle camera error */
                                        }
                                            ;
                                            break;
                                        case "STATUS_SEARCH": {
                                            /* Show some message while searching a face */
                                        }
                                            ;
                                            break;
                                        case "STATUS_FOUND": {
                                            /* OK! */
                                        }
                                    }
                                }
                            });
                            tryOn.start();
                        });
                    </script>
                </div>
                <div class="tab-pane" id="Clothes">
                    <h3><u>Virtual Clothes Try On</u></h3>
                    <p><b>Please upload an image and then select the Shirt you would like to try on.</b></p>
                    <form action="/action_page.php">
                        <label for="imgClothes">Select image:</label>
                        <input type="file" id="imgClothes" name="imgClothes" accept="image/*">
                        <input type="submit">
                    </form>
                </div>
                <div class="tab-pane" id="Hair">
                    <h3><u>Virtual Hair Coloring</u></h3>
                    <p><b>Please upload an image and then select the color of hair you would like to try.</b></p>

                    <form action="/action_page.php">
                        <label for="imgHair">Select image:</label>
                        <input type="file" id="imgHair" name="imgHair" accept="image/*">
                        <input type="submit">
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    $('#carouselExample').on('slide.bs.carousel', function (e) {
        var $e = $(e.relatedTarget);
        var idx = $e.index();
        var itemsPerSlide = 3;
        var totalItems = $('.carousel-item').length;
        if (idx >= totalItems - (itemsPerSlide - 1)) {
            var it = itemsPerSlide - (totalItems - idx);
            for (var i = 0; i < it; i++) {
                // append slides to end
                if (e.direction == "left") {
                    $('.carousel-item').eq(i).appendTo('.carousel-inner');
                } else {
                    $('.carousel-item').eq(0).appendTo('.carousel-inner');
                }
            }
        }
    });
</script>


</body>

</html>